services:
  # Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: log_dashboard_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - frontend
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # Application (Multiple Instances)
  app:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: log_dashboard_app_prod
    scale: 3
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-log_dashboard_prod}
      - DB_USER=${DB_USER:-log_dashboard_user}
      - DB_PASSWORD=${DB_PASSWORD:-changeme123}
      - DB_SSL_MODE=prefer
      - PLACK_ENV=production
      - LOG_LEVEL=warn
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Database
  db:
    image: postgres:15-alpine
    container_name: log_dashboard_db_prod
    environment:
      - POSTGRES_DB=${DB_NAME:-log_dashboard_prod}
      - POSTGRES_USER=${DB_USER:-log_dashboard_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-log_dashboard_user} -d ${DB_NAME:-log_dashboard_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: log_dashboard_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true 